package board;

import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;
import java.util.ArrayList;

public class BoardDAO {
	
	private ResultSet rs;
	private Connection conn;
	private Statement stmt;
	
	public BoardDAO() {
			try{
					Context context = new InitialContext();
					DataSource ds = (DataSource)context.lookup("java:comp/env/jdbc/oracle");	
					conn = ds.getConnection();
					
			}catch (Exception e){
					e.printStackTrace();
			}
		}
	
	public String getcurrentdate() {
		String query = "SELECT SYSDATE FROM DUAL";
		try {
			stmt = conn.createStatement();
			rs = stmt.executeQuery(query);
			if(rs.next()) {
				return rs.getString(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "";   // 데이터베이스 오류
	}
	
	public int getnext() {
		String query = "SELECT b_id FROM BOARD ORDER BY b_id DESC";
		//현재 게시글을 내림차순으로 조회하여 가장 마지막 글의 번호를 검색
		try {
			stmt = conn.createStatement();
			rs = stmt.executeQuery(query);
			if(rs.next()) {
				return rs.getInt(1) + 1;
			}
			return 1;   // 게시물이 없으면 첫번째
		} catch (Exception e) {
			e.printStackTrace();
		}
		return -1;   // 데이터베이스 오류
	}
	
	public int write(String title, String u_id, String content, String filepath) {
		
		try {
			String query = "INSERT INTO BOARD VALUES(" + getnext() + ",'" + title + "','" + u_id + "', TO_DATE('" + getcurrentdate() +  "','YYYY-MM-DD HH24:MI:SS'),'" + content + "'," + 1 + ",'" + filepath + "')";
		    stmt = conn.createStatement();
			return stmt.executeUpdate(query);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return -1;   // 데이터베이스 오류
	}
	
	public ArrayList<Board> getList(int pageNumber){
		String query = "SELECT * FROM ( SELECT * FROM BOARD WHERE b_id < " + Integer.toString(getnext() - (pageNumber - 1) * 10) + " AND availability = 1 ORDER BY b_id DESC) WHERE ROWNUM <= 10";
		ArrayList<Board> list = new ArrayList<Board>();
		try {
			stmt = conn.createStatement();
			rs = stmt.executeQuery(query);
			
			while(rs.next()) {
				Board board = new Board();
				board.setb_id(rs.getInt(1));
				board.settitle(rs.getString(2));
				board.setu_id(rs.getString(3));
				board.setb_date(rs.getString(4));
				board.setcontent(rs.getString(5));
				board.setavailability(rs.getInt(6));
				list.add(board);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;   // 데이터베이스 오류
	}
		
	public ArrayList<Board> getsearchList(int pageNumber, String title){
		String query = "SELECT * FROM ( SELECT * FROM BOARD WHERE TITLE LIKE '%" + title + "%' AND b_id < " + Integer.toString(getnext() - (pageNumber - 1) * 10) + " AND availability = 1 ORDER BY b_id DESC) WHERE ROWNUM <= 10";
		ArrayList<Board> list = new ArrayList<Board>();
		try {
			stmt = conn.createStatement();
			rs = stmt.executeQuery(query);
			
			while(rs.next()) {
				Board board = new Board();
				board.setb_id(rs.getInt(1));
				board.settitle(rs.getString(2));
				board.setu_id(rs.getString(3));
				board.setb_date(rs.getString(4));
				board.setcontent(rs.getString(5));
				board.setavailability(rs.getInt(6));
				list.add(board);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;   // 데이터베이스 오류
	}
	
	public ArrayList<Board> getunionEasy(String title){
		String query = "SELECT * FROM BOARD WHERE availability = 1 AND TITLE LIKE '%" + title + "%'";
		ArrayList<Board> list = new ArrayList<Board>();
		try {
			stmt = conn.createStatement();
			rs = stmt.executeQuery(query);
			
			while(rs.next()) {
				Board board = new Board();
				board.setb_id(rs.getInt(1));
				board.settitle(rs.getString(2));
				board.setu_id(rs.getString(3));
				board.setb_date(rs.getString(4));
				board.setcontent(rs.getString(5));
				board.setavailability(rs.getInt(6));
				list.add(board);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;   // 데이터베이스 오류
	}

	public ArrayList<Board> getsortList(int pageNumber, String column){
		String query = "SELECT * FROM ( SELECT * FROM BOARD WHERE b_id < " + Integer.toString(getnext() - (pageNumber - 1) * 10) + " AND availability = 1 ORDER BY b_id DESC) WHERE ROWNUM <= 10 ORDER BY " + column;
		ArrayList<Board> list = new ArrayList<Board>();
		try {
			stmt = conn.createStatement();
			rs = stmt.executeQuery(query);
			
			while(rs.next()) {
				Board board = new Board();
				board.setb_id(rs.getInt(1));
				board.settitle(rs.getString(2));
				board.setu_id(rs.getString(3));
				board.setb_date(rs.getString(4));
				board.setcontent(rs.getString(5));
				board.setavailability(rs.getInt(6));
				list.add(board);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;   // 데이터베이스 오류
	}

	public ArrayList<Board> getsearchsortList(int pageNumber, String title, String column){
		String query = "SELECT * FROM ( SELECT * FROM BOARD WHERE TITLE LIKE '%" + title + "%' AND b_id < " + Integer.toString(getnext() - (pageNumber - 1) * 10) + " AND availability = 1 ORDER BY b_id DESC) WHERE ROWNUM <= 10 ORDER BY " + column;
		ArrayList<Board> list = new ArrayList<Board>();
		try {
			stmt = conn.createStatement();
			rs = stmt.executeQuery(query);
			
			while(rs.next()) {
				Board board = new Board();
				board.setb_id(rs.getInt(1));
				board.settitle(rs.getString(2));
				board.setu_id(rs.getString(3));
				board.setb_date(rs.getString(4));
				board.setcontent(rs.getString(5));
				board.setavailability(rs.getInt(6));
				list.add(board);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;   // 데이터베이스 오류
	}
	

	public boolean nextPage(int pageNumber) {
		String query = "SELECT * FROM BOARD WHERE b_id < " + Integer.toString(getnext() - (pageNumber - 1) * 10) + " AND availability = 1";
		try {
			stmt = conn.createStatement();
			rs = stmt.executeQuery(query);
			if(rs.next()) {
				return true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;   // 데이터베이스 오류
	}
	
	public Board getboard(int b_id) {
		String query = "SELECT * FROM BOARD WHERE b_id = " + b_id;
		try {
			stmt = conn.createStatement();
			rs = stmt.executeQuery(query);
			if(rs.next()) {
				Board board = new Board();
				board.setb_id(rs.getInt(1));
				board.settitle(rs.getString(2));
				board.setu_id(rs.getString(3));
				board.setb_date(rs.getString(4));
				board.setcontent(rs.getString(5));
				board.setavailability(rs.getInt(6));
				board.setfilepath(rs.getString(7));
				return board;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;   // 데이터베이스 오류
	}
	
	public int update(int b_id, String title, String content) {
		String query = "UPDATE BOARD SET title = '" + title + "',content = '" + content + "' WHERE b_id = " + b_id;
		try {
			stmt = conn.createStatement();
			return stmt.executeUpdate(query);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return -1;   // 데이터베이스 오류
	}
	
	public int updatewithfile(int b_id, String title, String content, String filepath) {
		String query = "UPDATE BOARD SET title = '" + title + "',content = '" + content + "', filepath = '" + filepath + "' WHERE b_id = " + b_id;
		try {
			stmt = conn.createStatement();
			return stmt.executeUpdate(query);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return -1;   // 데이터베이스 오류
	}
	
	public int delete(int b_id) {
		String query = "UPDATE BOARD SET availability = 0 WHERE b_id = " + b_id;
		try {
			stmt = conn.createStatement();
			return stmt.executeUpdate(query);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return -1;   // 데이터베이스 오류
	}
	
	public int realdelete(int b_id) {
		String query = "DELETE FROM BOARD WHERE b_id = " + b_id;
		try {
			stmt = conn.createStatement();
			return stmt.executeUpdate(query);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return -1;   // 데이터베이스 오류
	}

	
}